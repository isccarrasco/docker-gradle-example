/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'mario' at '4/12/16 22:49' with Gradle 3.2.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.2.1/userguide/tutorial_java_projects.html
 */

buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }

  dependencies {
    classpath "gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.9.1"
  }
}

plugins {
  id 'com.palantir.docker' version '0.9.1'
  id 'com.palantir.docker-run' version '0.9.1'
}


// Apply the java plugin to add support for Java
apply plugin: 'com.palantir.docker'
apply plugin: 'application'
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

mainClassName = 'mx.com.isccarrasco.HelloWorld'

jar {
  manifest {
    attributes(
      'Main-Class': mainClassName
    )
  }
}

docker {
  name 'mx.com.isccarrasco/docker-gradle-example:1'
  tags 'latest'
  dockerfile 'src/main/docker/Dockerfile'
  dependsOn tasks.jar
}

dockerRun {
  name 'docker-gradle-example-container'
  image 'mx.com.isccarrasco/docker-gradle-example:1'
  command 'java', '-Djava.security.egd=file:/dev/./urandom', '-jar', 'app.jar'
}
